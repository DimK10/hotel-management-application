# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: '2.1'

orbs:
  slack: circleci/slack@4.4.4

commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  build:
    docker:
      # specify the version you desire here
      #- image: circleci/openjdk:8-jdk
      - image: circleci/openjdk:11-stretch

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/hotel-management-application

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - hotel-management-application-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - hotel-management-application-

      - run: mvn install -DskipTests

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: hotel-management-application-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn integration-test

      - store_test_results:
          path: target/surefire-reports

      - notify_slack_error
      - notify_slack_pass

  deploy:
    docker:
      # specify the version you desire here
      #- image: circleci/openjdk:8-jdk
      - image: circleci/openjdk:11-stretch

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/hotel-management-application

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
#      - restore_cache:
#          keys:
#            - hotel-management-application-{{ checksum "pom.xml" }}
#            # fallback to using the latest cache if no exact match is found
#            - hotel-management-application-
#
#      - save_cache:
#          paths:
#            - ~/.m2
#          key: hotel-management-application-{{ checksum "pom.xml" }}


      - attach_workspace:
          at: src
      - add_ssh_keys

      - setup_remote_docker:
          version: 20.10.14

      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          MYSQLDB_USER=$MYSQLDB_USER MYSQLDB_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD MYSQLDB_DATABASE=$MYSQLDB_DATABASE MYSQLDB_LOCAL_PORT=$MYSQLDB_LOCAL_PORT MYSQLDB_DOCKER_PORT=$MYSQLDB_DOCKER_PORT SPRING_LOCAL_PORT=$SPRING_LOCAL_PORT SPRING_DOCKER_PORT=$SPRING_DOCKER_PORT SECRET_KEY=$SECRET_KEY docker-compose push
          echo 'hotel-management-application.webapplicationonline.eu ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBXYypj+xteI9nFnA2RqJqNxkHHmp5BZfeAW1Qkng17R $EMAIL' >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no $USER@$SERVER \<<'ENDSSH'
          docker-compose pull dimk10/hotel-management-application
          docker stop hotel-management-application
          docker rm hotel-management-application
          MYSQLDB_USER=$MYSQLDB_USER MYSQLDB_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD MYSQLDB_DATABASE=$MYSQLDB_DATABASE MYSQLDB_LOCAL_PORT=$MYSQLDB_LOCAL_PORT MYSQLDB_DOCKER_PORT=$MYSQLDB_DOCKER_PORT SPRING_LOCAL_PORT=$SPRING_LOCAL_PORT SPRING_DOCKER_PORT=$SPRING_DOCKER_PORT SECRET_KEY=$SECRET_KEY docker-compose up -d
          ENDSSH

      - notify_slack_error
      - notify_slack_pass

#      - run:
#          name: Send to CodeCov
#          command: bash <(curl -s https://codecov.io/bash)
workflows:
  version: 2
  build_and_notify:
    jobs:
      - build:
          context: slack-secrets

      - deploy:
          requires:
            - build
          context: slack-secrets
          filters:
            branches:
              only: main
#      - notify:
#          context: slack-secrets
